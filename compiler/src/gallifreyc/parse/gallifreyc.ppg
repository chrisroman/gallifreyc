// Assumes polyglot.jar is in classpath
include "polyglot/ext/jl7/parse/jl7.ppg"

package gallifreyc.parse;

import gallifreyc.types.GallifreyTypeSystem;
import gallifreyc.ast.GallifreyNodeFactory;
import gallifreyc.ast.*;
import polyglot.parse.Name;
import polyglot.parse.VarDeclarator;

parser Grm extends polyglot.ext.jl7.parse.Grm {:
    public final GallifreyTypeSystem ts;
    public final GallifreyNodeFactory nf;

    public Grm(Lexer l, TypeSystem t, NodeFactory n, ErrorQueue q) {
        super(l, t, n, q);
        ts = (GallifreyTypeSystem) t;
        nf = (GallifreyNodeFactory) n;
    }
:};

terminal Token ALLOWS;
terminal Token BRANCH;
terminal Token CONTINGENT;
terminal Token DELETE;
terminal Token ENSURES;
terminal Token LOCAL;
terminal Token MATCH_RESTRICTION;
terminal Token MERGE;
terminal Token REQUIRES;
terminal Token RESTRICTION;
terminal Token SHARED;
terminal Token TEST;
terminal Token THREAD;
terminal Token TRANSITION;
terminal Token UNIQUE;
terminal Token WHEN;
terminal Token WHERE;
terminal Token WITH;

// Reference Qualifications (local, unique, shared)
non terminal PreCondition pre_condition_opt;
non terminal PostCondition post_condition_opt;
non terminal RefQualification ref_qualification;

// Restrictions
non terminal RestrictionDecl restriction_declaration_opt;
non terminal RestrictionDecl restriction_declaration;
non terminal RestrictionBody restriction_body;
non terminal List<Node> restriction_body_declarations_opt;
non terminal List<Node> restriction_body_declarations;
non terminal List<Node> restriction_body_declaration;
non terminal RestrictionMember allows_stmt;
non terminal MethodDecl test_declaration;
non terminal MethodDecl test_header;


start with goal;

// Reference Qualifications (local, unique, shared)
// TODO: Add example, fix result types
override type ::=
    // TypeNode
    primitive_type:a
{: RESULT = a; :}
|   ref_qualification:r reference_type:a
{:
 RESULT = parser.nf.RefQualifiedTypeNode(parser.pos(r, a), r, a);
 //RESULT = a;
 :}
;

ref_qualification ::=
    // RefQualification
    LOCAL:a
{: RESULT = parser.nf.LocalRef(parser.pos(a)); :}
| UNIQUE:a
{: RESULT = parser.nf.UniqueRef(parser.pos(a)); :}
| SHARED:a LBRACK IDENTIFIER:b RBRACK:c
{: RESULT = parser.nf.SharedRef(parser.pos(a,c),
                                parser.nf.Id(parser.pos(b), b.getIdentifier())); :}
;

// Pre/post conditions on method declarations in interfaces
override abstract_method_declaration ::=
    // MethodDecl
    method_header:a pre_condition_opt:b post_condition_opt:c SEMICOLON
{: RESULT = parser.nf.MethodDecl(a.position(), a, b, c); :}
;

pre_condition_opt ::=
    // PreCondition
    {: RESULT = null; :}
    | REQUIRES:a expression:b
    {: RESULT = parser.nf.PreCondition(parser.pos(a, b), b); :}
;

post_condition_opt ::=
    // PostCondition
    {: RESULT = null; :}
    | ENSURES:a expression:b
    {: RESULT = parser.nf.PostCondition(parser.pos(a, b), b); :}
;

// Restrictions
// Add 'restriction's to the language
// TODO: Do something with restriction_declaration
override compilation_unit ::=
    // SourceFile
    package_declaration_opt:a
    import_declarations_opt:b
    type_declarations_opt:c
    restriction_declaration_opt:d
    {: RESULT = parser.nf.SourceFile(new Position(parser.lexer.path(), parser.lexer.file()),
                                     a, b, c);
     :}
|   error
    type_declarations_opt:c
    {: RESULT = parser.nf.SourceFile(new Position(parser.lexer.path(), parser.lexer.file()),
                                     null, Collections.<Import> emptyList(), c);
     :}
;

restriction_declaration_opt ::=
    {: RESULT = null; :}
    | restriction_declaration:a
    {: RESULT = a; :}
;

restriction_declaration ::=
    // RestrictionDecl
    RESTRICTION:a IDENTIFIER:b FOR IDENTIFIER:c restriction_body:d
    {: RESULT = parser.nf.RestrictionDecl(parser.pos(a, d),
                                          parser.nf.Id(parser.pos(b), b.getIdentifier()),
                                          parser.nf.Id(parser.pos(c), c.getIdentifier()),
                                          d); :}
;

restriction_body ::=
    // RestrictionBody
    LBRACE:a restriction_body_declarations_opt:b RBRACE:c
    {: RESULT = parser.nf.RestrictionBody(parser.pos(a, c), b); :}
;

restriction_body_declarations_opt ::=
    // List of RestrictionMember
    {: RESULT = new LinkedList<>(); :}
    | restriction_body_declarations:a
    {: RESULT = a; :}
;

restriction_body_declarations ::=
    // List of RestrictionMember
    restriction_body_declaration:a
    {: RESULT = a; :}
| restriction_body_declarations:a restriction_body_declaration:b
{:
 RESULT = a;
 a.addAll(b);
 :}
;

restriction_body_declaration ::=
    // List of RestrictionMember
    SEMICOLON
{:
 List<Node> l = new LinkedList<>();
 RESULT = l;
 :}
    | allows_stmt:a SEMICOLON
    {:
     List<Node> l = new LinkedList<>();
     l.add(a);
     RESULT = l;
     :}
| test_declaration:a
{:
 List<Node> l = new LinkedList<>();
 l.add(a);
 RESULT = l;
 :}
;

allows_stmt ::=
    // Node
    ALLOWS:a IDENTIFIER:b
    {: RESULT = parser.nf.AllowsStmt(parser.pos(a, b),
                                     parser.nf.Id(parser.pos(b), b.getIdentifier())); :}
| ALLOWS:a IDENTIFIER:b CONTINGENT IDENTIFIER:c
{: RESULT = parser.nf.AllowsStmt(parser.pos(a, b),
                                 parser.nf.Id(parser.pos(b), b.getIdentifier()),
                                 parser.nf.Id(parser.pos(c), c.getIdentifier())); :}
;

// tests for restrictions
/*
  method_declaration ::=
  // MethodDecl
  method_header:a method_body:b
  {: RESULT = (MethodDecl) a.body(b); :}

  probably change/add onto method_header
 */

test_declaration ::=
    // MethodDecl
    test_header:a method_body:b
{: RESULT = (MethodDecl) a.body(b); :}
;

test_header ::=
    // MethodDecl
    modifiers_or_annotations_opt:a TEST:b IDENTIFIER:c LPAREN
    formal_parameter_list_opt:d RPAREN:g throws_opt:f
    {: RESULT = parser.nf.MethodDecl(parser.pos(b, g, c), a,
                                     parser.nf.CanonicalTypeNode(parser.pos(b),
                                                                 parser.ts.Boolean()),
                                     parser.nf.Id(parser.pos(c), c.getIdentifier()),
                                     d, f, null, true); :}
;

